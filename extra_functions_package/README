Optical Field Processing Package

This package provides a comprehensive suite of tools for generating, processing, and visualizing optical fields, including laser beams, Laguerre-Gaussian (LG) modes, and singularities. It includes functions for simulating optical turbulence, finding beam centers, manipulating knots, and analyzing singularities in 3D optical fields.

Features

Knot Field Calculation & Visualization: Compute and visualize braid knot fields using Laguerre-Gaussian (LG) modes.

Optical Beam Generation: Generate various optical beam configurations, including LG beams and Milnor polynomials.

Beam Center Detection: Find the center of laser beams using interpolation and normalization techniques.

Singularity Processing: Detect, filter, and analyze singularities in optical fields.

Optical Turbulence Simulation: Generate phase screens and propagate beams through turbulent media.

2D & 3D Plotting: Visualize complex optical fields using Matplotlib and Plotly.

Module Descriptions

1. all_knots_functions

This module calculates and visualizes knot fields using braid functions and LG modes.

Functions:

general_braid_function(): Computes general braid fields.

trefoil_standard(), hopf_standard(), borromean(): Predefined knot configurations.

field_combination_LG(): Combines different LG modes.

2. beams_and_pulses

This module provides functions to generate and manipulate different optical beam shapes.

Functions:

LG_simple(): Creates classic Laguerre-Gaussian beams.

trefoil(), hopf(): Generates fields based on knot configurations.

milnor_Pol_u_v_any(): Constructs Milnor polynomials.

3. center_beam_search

Processes laser beam fields by finding beam centers and removing tilts.

Functions:

find_beam_waist(): Estimates beam waist.

center_beam_finding(): Finds the center of the beam.

remove_tilt(): Removes beam tilt for accurate analysis.

4. data_generation_old

Handles field processing from .mat files, normalization, interpolation, and center finding.

Functions:

read_field_2D_single(): Reads a 2D array from MATLAB files.

field_interpolation(): Rescales fields for higher accuracy.

one_plane_propagator(): Simulates double-sided propagation of optical fields.

5. dots_processing

Processes singularity dots in 3D optical fields by filtering, clustering, and reducing noise.

Functions:

filter_PlaneTwoClusters(): Identifies and removes small clusters.

globalFilterDots(): Applies multiple filters for noise reduction.

filtered_dots(): Outputs processed singularity dots.

6. functions_general

Provides general mathematical and utility functions for numerical simulations.

Functions:

create_mesh_XYZ(): Generates 3D mesh grids.

interpolation_complex(): Interpolates complex fields.

propagator_split_step_3D(): Simulates optical field propagation.

7. functions_turbulence

Simulates optical turbulence and its effects on laser beams.

Functions:

r0_from_Cn2(): Computes Fried parameter from turbulence data.

propagation_ps(): Propagates beams through multiple phase screens.

find_center_of_intensity(): Determines the intensity center in 2D fields.

8. plotings

Handles visualization of optical fields and singularities in 2D and 3D.

Functions:

plot_2D(): Plots 2D fields.

plot_3D_dots_go(): Interactive 3D singularity dot visualization.

plot_scatter_3D(): Creates scatter plots in 3D.

9. singularities

Detects and processes singularities in optical fields, including knots and OAM spectra.

Functions:

plane_singularities_finder_9dots(): Finds singularities in 2D slices.

get_singularities(): Extracts and simplifies singularity structures.

knot_build_pyknotid(): Constructs pyknotid knots.




Installation

Ensure you have the following dependencies installed:
pip install numpy scipy matplotlib plotly aotools

License

This package is developed for research purposes. Contact the author for licensing details.

Author

Dmitrii Tsvetkov